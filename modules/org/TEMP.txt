        /// The number of organizations in this module (eventually add nuance like `Active` tiers)
        // OrganizationCounter get(fn organization_counter): u32;

        // /// Organizations that were registered in this module
        // OrganizationStates get(fn organization_states): map
        //     hasher(opaque_blake2_256) OrgId<T> => Option<Organization<FlatShareId<T>, WeightedShareId<T>, T::IpfsReference>>;

        // /// Organization Inner Shares
        // /// - purpose: organizational governance, task supervision
        // OrganizationInnerShares get(fn organization_inner_shares): double_map
        //     hasher(blake2_128_concat) OrgId<T>,
        //     hasher(blake2_128_concat) ShareID<FlatShareId<T>, WeightedShareId<T>> => bool;

        // /// Organization Outer Shares
        // /// - purpose: funded teams ownership enforcement, external contractors
        // OrganizationOuterShares get(fn organization_outer_shares): double_map
        //     hasher(blake2_128_concat) OrgId<T>,
        //     hasher(blake2_128_concat) ShareID<FlatShareId<T>, WeightedShareId<T>> => bool;


/// Add member to organization's share class
        #[weight = 0]
        fn add_new_member_to_share_group(
            origin,
            organization: T::OrgId,
            share_id: T::ShareId,
            new_member: T::AccountId,
        ) -> DispatchResult {
            let caller = ensure_signed(origin)?;
            let authentication: bool = Self::is_sudo_key(&caller)
                                    || Self::is_organization_supervisor(organization, &caller)
                                    || Self::is_sub_group_supervisor(organization, share_id, &caller);
            ensure!(authentication, Error::<T>::NotAuthorizedToChangeMembership);
            let prefix = ShareGroup::new(organization, share_id);
            Self::add_group_member(prefix, new_member.clone(), false);
            Self::deposit_event(RawEvent::NewMemberAdded(organization, share_id, new_member));
            Ok(())
        }

        /// Remove member from organization's share class
        #[weight = 0]
        fn remove_old_member_from_share_group(
            origin,
            organization: T::OrgId,
            share_id: T::ShareId,
            old_member: T::AccountId,
        ) -> DispatchResult {
            let caller = ensure_signed(origin)?;
            let authentication: bool = Self::check_if_sudo_account(&caller)
                                    || Self::check_if_organization_supervisor_account(organization, &caller)
                                    || Self::is_sub_group_supervisor(organization, share_id, &caller);
            ensure!(authentication, Error::<T>::NotAuthorizedToChangeMembership);
            let prefix = ShareGroup::new(organization, share_id);
            Self::remove_group_member(prefix, old_member.clone(), false);
            Self::deposit_event(RawEvent::OldMemberRemoved(organization, share_id, old_member));
            Ok(())
        }

        // Batch add members to organization's share class
        #[weight = 0]
        fn add_new_members_to_share_group(
            origin,
            organization: T::OrgId,
            share_id: T::ShareId,
            new_members: Vec<T::AccountId>,
        ) -> DispatchResult {
            let caller = ensure_signed(origin)?;
            let authentication: bool = Self::check_if_sudo_account(&caller)
                                    || Self::check_if_organization_supervisor_account(organization, &caller)
                                    || Self::is_sub_group_supervisor(organization, share_id, &caller);
            ensure!(authentication, Error::<T>::NotAuthorizedToChangeMembership);
            Self::batch_add_members_to_sub_org(organization, share_id, new_members);
            Self::deposit_event(RawEvent::BatchMemberAddition(caller, organization, share_id));
            Ok(())
        }

        // Batch remove members from organization's share class
        #[weight = 0]
        fn remove_old_members_from_share_group(
            origin,
            organization: T::OrgId,
            share_id: T::ShareId,
            old_members: Vec<T::AccountId>,
        ) -> DispatchResult {
            let caller = ensure_signed(origin)?;
            let authentication: bool = Self::check_if_sudo_account(&caller)
                                    || Self::check_if_organization_supervisor_account(organization, &caller)
                                    || Self::is_sub_group_supervisor(organization, share_id, &caller);
            ensure!(authentication, Error::<T>::NotAuthorizedToChangeMembership);
            Self::batch_remove_members_from_sub_org(organization, share_id, old_members);
            Self::deposit_event(RawEvent::BatchMemberRemovalForOrg(caller, organization, share_id));
            Ok(())
        }

        // #[weight = 0]
        // fn register_organization_from_accounts(
        //     origin,
        //     value_constitution: T::IpfsReference,
        //     accounts: Vec<T::AccountId>,
        //     supervisor: Option<T::AccountId>,
        // ) -> DispatchResult {
        //     let caller = ensure_signed(origin)?;
        //     let authentication: bool = Self::is_sudo_account(&caller)
        //         || Self::check_membership_in_org(1u32.into(), &caller);
        //     ensure!(authentication, Error::<T>::MustBeAMemberOf0thOrgToRegisterNewOrg);

        //     let new_organization_state = Self::register_organization(OrganizationSource::<_, SharesOf<T>>::Accounts(accounts), value_constitution, supervisor)?;
        //     Self::deposit_event(RawEvent::NewOrganizationRegistered(caller, new_organization_state.0, new_organization_state.1.admin_id(), new_organization_state.1.constitution()));
        //     Ok(())
        // }
        // #[weight = 0]
        // fn register_inner_flat_share_group_for_organization(
        //     origin,
        //     organization: u32,
        //     group: Vec<T::AccountId>,
        // ) -> DispatchResult {
        //     let caller = ensure_signed(origin)?;
        //     let authentication: bool = Self::is_sudo_account(&caller)
        //         || Self::is_organization_supervisor(organization, &caller);
        //     ensure!(authentication, Error::<T>::MustHaveCertainAuthorityToRegisterInnerShares);

        //     let new_share_id = Self::register_inner_flat_share_group(organization, group)?;
        //     Self::deposit_event(RawEvent::FlatInnerShareGroupAddedToOrg(caller, organization, new_share_id));
        //     Ok(())
        // }
        // #[weight = 0]
        // fn register_inner_weighted_share_group_for_organization(
        //     origin,
        //     organization: u32,
        //     group: Vec<(T::AccountId, SharesOf<T>)>,
        // ) -> DispatchResult {
        //     let caller = ensure_signed(origin)?;
        //     let authentication: bool = Self::is_sudo_account(&caller)
        //         || Self::is_organization_supervisor(organization, &caller);
        //     ensure!(authentication, Error::<T>::MustHaveCertainAuthorityToRegisterInnerShares);

        //     let new_share_id = Self::register_inner_weighted_share_group(organization, group)?;
        //     Self::deposit_event(RawEvent::WeightedInnerShareGroupAddedToOrg(caller, organization, new_share_id));
        //     Ok(())
        // }
        // #[weight = 0]
        // fn register_outer_weighted_share_group_for_organization(
        //     origin,
        //     organization: u32,
        //     group: Vec<(T::AccountId, SharesOf<T>)>,
        // ) -> DispatchResult {
        //     let caller = ensure_signed(origin)?;
        //     let authentication: bool = Self::is_sudo_account(&caller)
        //         || Self::is_organization_supervisor(organization, &caller);
        //     ensure!(authentication, Error::<T>::MustHaveCertainAuthorityToRegisterOuterShares);

        //     let new_share_id = Self::register_outer_weighted_share_group(organization, group)?;
        //     Self::deposit_event(RawEvent::WeightedOuterShareGroupAddedToOrg(caller, organization, new_share_id));
        //     Ok(())
        // }
        // setting all permissions


add_extra_genesis {
        // ~~ ORG GENESIS CONFIG ITEMS START ~~
        /// The sudo key for managing setup at genesis
        config(omnipotent_key): T::AccountId;
        /// All organizational memberships registered at genesis
        config(membership): Option<Vec<(T::OrgId, T::AccountId, bool)>>;
        // ~~ SHARE GENESIS CONFIG ITEMS START ~~
        config(share_supervisors): Option<Vec<(T::OrgId, T::ShareId, T::AccountId)>>;
        /// The shareholder member definition at genesis, requires consistency with other module geneses (plural of genesis)
        config(shareholder_membership): Option<Vec<(T::OrgId, T::ShareId, T::AccountId, bool)>>;
        // supervisor set to sudo according to rules of only module call in build(..)
        // config(first_organization_supervisor): T::AccountId;
        // config(first_organization_value_constitution): T::IpfsReference;
        // config(first_organization_flat_membership): Vec<T::AccountId>;

        build(|config: &GenesisConfig<T>| {
            if let Some(mem) = &config.membership {
                mem.iter().for_each(|(org_id, account, _)| {
                    <Module<T>>::add_new_member(
                        T::Origin::from(Some(config.omnipotent_key.clone()).into()),
                        *org_id,
                        account.clone(),
                    ).expect("genesis member could not be added to the organization");
                });
            }
            if let Some(sup) = &config.share_supervisors {
                sup.clone().iter().for_each(|(org, sid, acc)| {
                    OrganizationShareSupervisor::<T>::insert(org, sid, acc);
                });
            }
            if let Some(mem) = &config.shareholder_membership {
                mem.iter().for_each(|(org_id, share_id, account, _)| {
                    let share_supervisor = OrganizationShareSupervisor::<T>::get(org_id, share_id).expect("share supervisor must exist in order to add members at genesis");
                    <Module<T>>::add_new_member(
                        T::Origin::from(Some(share_supervisor).into()),
                        *org_id,
                        *share_id,
                        account.clone(),
                    ).expect("genesis member could not be added to the organization");
                });
            }
            // <Module<T>>::register_organization_from_accounts(
            //     T::Origin::from(Some(config.first_organization_supervisor.clone()).into()),
            //     config.first_organization_value_constitution.clone(),
            //     config.first_organization_flat_membership.clone(),
            //     Some(config.first_organization_supervisor.clone())
            // ).expect("first organization config set up failed");
        })
    }